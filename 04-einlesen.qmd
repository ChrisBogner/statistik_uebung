# Daten in R einlesen und aus R speichern {#sec-einlesen}

:::{.outcomes}
- Daten aus Textdateien in R einlesen
- Die $-Notation
- Ansprechen eines Eintrags im `tibble`
- Daten als Textdateien aus R speichern
:::

```{r}
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(kableExtra)
```

## Daten aus Textdateien in R einlesen
Um Daten aus Textdateien (z.B. aus .csv, .txt, .dat) in R zu importieren (i.e. einzulesen) werden wir die Bibliothek `readr` aus `tidyverse` benutzen. Wir laden erst einmal `tidyverse`.

```{r}
#| message: false
#| warning: false
library(tidyverse)
```

Wir gehen davon aus, dass die Daten im Ordner `Daten` gespeichert sind. Falls Ihre Daten an einem anderen Ort abgelegt sind, müssen Sie den Pfad beim Einlesen entsprechend anpassen. 

Um die Daten zu laden, gibt es in der Bibliothek `readr` verschiedene Funktionen, die alle mit `read_` beginnen. Die allgemeinste davon ist `read_delim`. Darin kann man explizit einstellen, mit welchem Zeichen (z. B. Komma, Strichpunkt etc.) die einzelnen Spalten in der zu importierenden Datei getrennt sind. In der Datei, die wir einlesen, ist das Trennungszeichen `;`. Das müssen Sie aber bei jeder Datei, die Sie einlesen, nachsehen.

```{r}
car_numbers <- read_delim(file = 'Daten/autos_2022-11-06.csv', delim = ';')
```

Ein kurzer Blick auf den Datensatz, den Sie aus der ersten Sitzung der Vorlesung erkennen sollten `r emo::ji('smile')`. Es sind die Daten zur **Mobilität in Europa** aus [eurostat](https://ec.europa.eu/eurostat/databrowser/view/road_eqs_carhab/default/bar?lang=en), heruntergeladen am 06.11.2022 und vorgefiltert. Die Daten beinhalten die Anzhal der "Personenkraftwagen je 1 000 Einwohner", online Datencode: ROAD_EQS_CARHAB.

```{r}
car_numbers
```

Das Ergebnis des Einlesens mit `read_` Funktionen ist immer ein `tibble`. 

## Einzelne Variablen ansprechen
Jede Variable hat einen Namen. Man kann diesen nutzen, um die Variable anzusprechen. Z. B. könnten wir die Variable `geo` so ansprechen:
```{r}
car_numbers$geo
```

Sie sehen, dass die Darstellung jetzt anders aussieht, weil eine einzelne Variable ein Vektor ist und kein `tibble`. Vektoren werden (durchnummeriert) ausgegeben und wir sehen alle 76 Einträge (Länder) nacheinander in der Reihenfolge ihres Erscheinens in der Variablen `geo`.

## Ansprechen mehrere Spalten in einem `tibble`
Ein `tibble` ist ein zwei-dimensionales Objekt: Es hat Zeilen (erste Dimension) und Spalten (zweite Dimension). Um so ein Objekt richtig anzusprechen, erweitern wir unsere Notation mit den eckigen Klammern. Jetzt brauchen wir nämlich zwei Indizes: einen Index für die Zeile und einen Index für die Spalte eines Eintrags. Wenn wir z. B. den dritten Eintrag in der ersten Spalte (Variable `geo`) sehen wollen, schreiben wir:
```{r}
car_numbers[3, 1]
```

Es handelt sich um Österreich. Wir können auch ganze Spalten (Variablen) ansprechen. Dafür wird der erste Index (für Zeilen) weggelassen. Nichts (oder ein Leerzeichen) signalisieren R, dass alle Einträge gemeint sind. So können wir die erste Spalte wie folgt ansprechen:
```{r}
car_numbers[, 1]
```

Beim Ansprechen ganzer Zeilen ist es ähnlich. Wir lassen den Index für die Spalte weg. Um die erste Zeile anzusprechen, schreiben wir:
```{r}
car_numbers[1,]
```

Sie sollten einen wichtigen Unterschied zwischen der \$-Notation und dem Ansprechen in eckigen Klammern bemerken: Die \$-Notation gibt einen Vektor zurück. Wenn Sie ein `tibble` mit eckigen Klammern ansprechen, ist die Antwort ein `tibble`.

## Ein `tibble` erstellen
Um ein `tibble` zu erstellen, nutzen wir die Funktion `tibble()` und zählen auf, welche Variablen wir dort haben möchten.
```{r}
car_numbers_short <- tibble(Land = car_numbers$geo, Zeit = car_numbers$time)
```

In dem Datensatz `car_numbers_short` haben wir jetzt die beiden Variablen `geo` und `time` aus dem Datensatz `car_numbers` als `tibble` abgespeichert.


## Daten aus R speichern
Wir speichern dieses `tibble` als Textdatei. Dafür nutzen wir die Funktion `wirte_delim()`, die ebenfalls in der Bibliothek `readr` in `tidyverse` vorhanden ist. Achten Sie darauf, dass `write_delim()` nur `tibble` speichern kann. Wenn Sie einen Vektor (eine einzelne Variable) abspeichern möchten, dann wandeln Sie diesen zuerst in ein `tibble` um.
```{r}
write_delim(x = car_numbers_short, file = 'Daten/geo.csv', delim = ';')
```



## Lesestoff
Kapitel 4.1 in @ModernDive


## Aufgaben

## Die Umfrage aus der ersten Sitzung
Lesen Sie die Datei 'Umfrage_2022_kurz.csv' ein. Sie enthält die Umfrageergebnisse aus der ersten Session der Vorlesung zur Frage 'Haben Sie schon mal einen Statistikkurs besucht?'
```{r}
#| echo: false
#| warning: false
#| message: false
umfrage <- read_delim(file = 'Daten/Umfrage_2022_kurz.csv', delim = ';')

```

1. Wie viele Einträge enthält der Datensatz?
2. Wie viele Variablen enthält der Datensatz?
3. Sind die Variablen numerisch oder kategorial?
4. Erklären Sie jede Variable. Welche Information enthält sie?
5. Stellen Sie die Antworten auf die Frage als Balkendiagramm dar. Es soll wie folgt aussehen:

```{r}
#| echo: false
ggplot(umfrage, mapping = aes(x = Poll_Option)) +
  geom_bar() +
  labs(x = 'Antworten',
       y = 'Anzahl',
       title = 'Haben Sie schon mal einen Statistikkurs besucht?',
       caption = 'Quelle: Umfrageergebnisse Teilnehmende Vorlesung Statistik WS 2022-2023')
```


6. Wie viele Teilnehmende haben bereits einen Statistikkurs besucht (ungefähr)?

## Ihre Arbeit einreichen
- Speichern Sie Ihr Notebook ab.
- Laden Sie Ihre .Rmd Datei in ILIAS hoch. **Beachten Sie die Frist!**
- Sie erhalten die Musterlösung nach dem Hochladen.
